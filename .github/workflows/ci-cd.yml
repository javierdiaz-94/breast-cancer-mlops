# Nombre del flujo de trabajo que se mostrará en la pestaña "Actions" de GitHub.
name: CI/CD Pipeline

# Define los eventos que activarán la ejecución de este flujo de trabajo.
on:
  # Se activa cuando se hace un push a las ramas main o develop.
  push:
    branches:
      - main
      - develop
  # Se activa cuando se crea o actualiza un pull request dirigido a las ramas main o develop.
  pull_request:
    branches:
      - main
      - develop

# Define los trabajos (jobs) que se ejecutarán como parte del flujo de trabajo.
jobs:
  # Primer trabajo: "test". Su propósito es ejecutar las pruebas unitarias.
  test:
    name: Run Tests
    # El tipo de máquina virtual en la que se ejecutará el trabajo.
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Descarga el código del repositorio a la máquina virtual.
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configura el entorno de Python en la versión especificada.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Paso 3: Configura la caché para las dependencias de pip.
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Paso 4: Instala las dependencias del proyecto listadas en requirements.txt.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Paso 5: Ejecuta el script de entrenamiento del modelo (necesario para las pruebas de API).
      - name: Train model
        run: |
          python models/train_model.py

      # Paso 6: Ejecuta las pruebas unitarias con pytest y genera un informe de cobertura.
      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=api --cov-report=term-missing

      # Paso 7: Sube el informe de cobertura de código a Codecov.
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always() # Se ejecuta siempre, incluso si los pasos anteriores fallan.

  # Segundo trabajo: "build". Su propósito es construir la imagen de Docker y subirla.
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    # Este trabajo depende de que el trabajo "test" se complete con éxito.
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # --- Pre-requisitos para el Build ---

      # Entrenar el modelo (Se necesita el modelo serializado para el COPY en el Dockerfile)
      - name: Train model for Docker
        run: |
          python models/train_model.py
      
      # Configura Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Inicia sesión en Docker Hub (solo si es un push a main)
      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # --- Build, Tag y Push (Paso modificado) ---

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        if: github.ref == 'refs/heads/main' # Solo sube si es la rama main
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/breast-cancer-api:latest
            ${{ secrets.DOCKER_USERNAME }}/breast-cancer-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Prueba Rápida de la Imagen (Local Build/Test) ---
      
      # Si NO es 'main' (por ejemplo, 'develop' o 'pull_request'), simplemente construye localmente y prueba.
      - name: Build and Test Docker image (No push)
        if: github.ref != 'refs/heads/main'
        run: |
          docker build -t breast-cancer-api:latest .
          docker run -d -p 5000:5000 --name test-api breast-cancer-api:latest
          sleep 10
          curl -f http://localhost:5000/ || exit 1
          docker stop test-api
          docker rm test-api
          
  # Tercer trabajo: "integration-test". Ejecuta pruebas de integración contra el contenedor Docker.
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Ya que el job 'build' puede haber subido la imagen (si es main),
      # este job solo necesita construirla localmente para la prueba de integración
      # o hacer un pull si ya está en un registro (para un despliegue real).
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (para ejecutar el script de test)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Entrenar el modelo (Necesario si el modelo no está en la imagen base)
      - name: Train model
        run: |
          python models/train_model.py

      - name: Build Docker image for integration test
        run: |
          docker build -t breast-cancer-api:test .

      # Paso 6: Ejecuta el contenedor Docker en segundo plano para las pruebas.
      - name: Run container
        run: |
          docker run -d -p 5000:5000 --name integration-test breast-cancer-api:test
          sleep 15

      # Paso 7: Ejecuta las pruebas de integración.
      - name: Run integration tests (API endpoints)
        run: |
          python tests/test_endpoints.py # Asumiendo que has movido el script de prueba a tests/test_endpoints.py

      # Paso 8: Detiene y elimina el contenedor de prueba para limpiar el entorno.
      - name: Stop and remove container
        if: always()
        run: |
          docker stop integration-test || true
          docker rm integration-test || true
